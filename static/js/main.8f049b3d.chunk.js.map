{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","username","catchPhrase","id","className","alt","src","CardList","robots","map","user","i","company","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAeeA,EAZF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,GACrC,OACE,sBAAKC,UAAU,wCAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,KAC/C,gCACE,mCAAMF,KACN,4BAAIC,WCUGK,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,mCACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,EAAD,CACER,GAAIK,EAAOG,GAAGR,GACdF,SAAUO,EAAOG,GAAGV,SACpBC,YAAaM,EAAOG,GAAGC,QAAQV,oBCK5BW,G,MAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,YACVW,KAAK,SACLC,YAAY,oBACZC,SAAUH,Q,4BCYHI,E,kDAnBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAKL,MAAMO,a,GAhBKC,a,MCoCZC,MAhCf,WACE,MAA4BC,mBAAS,IAArC,mBAAOrB,EAAP,KAAesB,EAAf,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAUQ,QAEb,IAEH,IAIMC,EAAiB/B,EAAOgC,QAAO,SAACC,GACpC,OAAOA,EAAMxC,SAASyC,cAAcC,SAASZ,EAAYW,kBAE3D,OAAQlC,EAAOoC,OAGb,sBAAKxC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAZQ,SAAC+B,GACtBb,EAAea,EAAMC,OAAOC,UAY1B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUvC,OAAQ+B,SANtB,0CCdWS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8f049b3d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Card.css\";\r\n\r\nconst Card = ({ username, catchPhrase, id }) => {\r\n  return (\r\n    <div className=\"tc dib pa3 ma2 grow bw2 shadow-5 card\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}`} />\r\n      <div>\r\n        <h2>@{username}</h2>\r\n        <p>{catchPhrase}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            id={robots[i].id}\r\n            username={robots[i].username}\r\n            catchPhrase={robots[i].company.catchPhrase}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"../styles/SearchBox.css\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"searchbox\"\r\n        type=\"search\"\r\n        placeholder=\" search robots...\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Sorry, an error occured</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"../styles/App.css\";\r\n\r\nfunction App() {\r\n  const [robots, setRobots] = useState([]);\r\n  const [searchfield, setSearchfield] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => {\r\n        setRobots(users);\r\n      });\r\n  }, []); //only runs if robots change.\r\n\r\n  const onSearchChange = (event) => {\r\n    setSearchfield(event.target.value);\r\n  };\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.username.toLowerCase().includes(searchfield.toLowerCase());\r\n  });\r\n  return !robots.length ? (\r\n    <h1>Loading</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <ErrorBoundry>\r\n        <CardList robots={filteredRobots} />\r\n      </ErrorBoundry>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}